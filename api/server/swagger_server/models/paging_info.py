# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.paper_sort_by import PaperSortBy  # noqa: F401,E501
from swagger_server.models.sort_order import SortOrder  # noqa: F401,E501
from swagger_server import util


class PagingInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, first: str=None, prev: str=None, current: str=None, next: str=None, last: str=None, current_page: int=None, total_pages: int=None, per_page: int=None, total_items: int=None, sorted_by: PaperSortBy=None, sorted_order: SortOrder=None):  # noqa: E501
        """PagingInfo - a model defined in Swagger

        :param first: The first of this PagingInfo.  # noqa: E501
        :type first: str
        :param prev: The prev of this PagingInfo.  # noqa: E501
        :type prev: str
        :param current: The current of this PagingInfo.  # noqa: E501
        :type current: str
        :param next: The next of this PagingInfo.  # noqa: E501
        :type next: str
        :param last: The last of this PagingInfo.  # noqa: E501
        :type last: str
        :param current_page: The current_page of this PagingInfo.  # noqa: E501
        :type current_page: int
        :param total_pages: The total_pages of this PagingInfo.  # noqa: E501
        :type total_pages: int
        :param per_page: The per_page of this PagingInfo.  # noqa: E501
        :type per_page: int
        :param total_items: The total_items of this PagingInfo.  # noqa: E501
        :type total_items: int
        :param sorted_by: The sorted_by of this PagingInfo.  # noqa: E501
        :type sorted_by: PaperSortBy
        :param sorted_order: The sorted_order of this PagingInfo.  # noqa: E501
        :type sorted_order: SortOrder
        """
        self.swagger_types = {
            'first': str,
            'prev': str,
            'current': str,
            'next': str,
            'last': str,
            'current_page': int,
            'total_pages': int,
            'per_page': int,
            'total_items': int,
            'sorted_by': PaperSortBy,
            'sorted_order': SortOrder
        }

        self.attribute_map = {
            'first': 'first',
            'prev': 'prev',
            'current': 'current',
            'next': 'next',
            'last': 'last',
            'current_page': 'currentPage',
            'total_pages': 'totalPages',
            'per_page': 'perPage',
            'total_items': 'totalItems',
            'sorted_by': 'sortedBy',
            'sorted_order': 'sortedOrder'
        }
        self._first = first
        self._prev = prev
        self._current = current
        self._next = next
        self._last = last
        self._current_page = current_page
        self._total_pages = total_pages
        self._per_page = per_page
        self._total_items = total_items
        self._sorted_by = sorted_by
        self._sorted_order = sorted_order

    @classmethod
    def from_dict(cls, dikt) -> 'PagingInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PagingInfo of this PagingInfo.  # noqa: E501
        :rtype: PagingInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first(self) -> str:
        """Gets the first of this PagingInfo.

        The URL of the first page of results.  # noqa: E501

        :return: The first of this PagingInfo.
        :rtype: str
        """
        return self._first

    @first.setter
    def first(self, first: str):
        """Sets the first of this PagingInfo.

        The URL of the first page of results.  # noqa: E501

        :param first: The first of this PagingInfo.
        :type first: str
        """

        self._first = first

    @property
    def prev(self) -> str:
        """Gets the prev of this PagingInfo.

        The URL of the previous page of results. Null if the current page is the first page.  # noqa: E501

        :return: The prev of this PagingInfo.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev: str):
        """Sets the prev of this PagingInfo.

        The URL of the previous page of results. Null if the current page is the first page.  # noqa: E501

        :param prev: The prev of this PagingInfo.
        :type prev: str
        """

        self._prev = prev

    @property
    def current(self) -> str:
        """Gets the current of this PagingInfo.

        The URL of the current page of results.  # noqa: E501

        :return: The current of this PagingInfo.
        :rtype: str
        """
        return self._current

    @current.setter
    def current(self, current: str):
        """Sets the current of this PagingInfo.

        The URL of the current page of results.  # noqa: E501

        :param current: The current of this PagingInfo.
        :type current: str
        """

        self._current = current

    @property
    def next(self) -> str:
        """Gets the next of this PagingInfo.

        The URL of the next page of results. Null if the current page is the last page.  # noqa: E501

        :return: The next of this PagingInfo.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next: str):
        """Sets the next of this PagingInfo.

        The URL of the next page of results. Null if the current page is the last page.  # noqa: E501

        :param next: The next of this PagingInfo.
        :type next: str
        """

        self._next = next

    @property
    def last(self) -> str:
        """Gets the last of this PagingInfo.

        The URL of the last page of results.  # noqa: E501

        :return: The last of this PagingInfo.
        :rtype: str
        """
        return self._last

    @last.setter
    def last(self, last: str):
        """Sets the last of this PagingInfo.

        The URL of the last page of results.  # noqa: E501

        :param last: The last of this PagingInfo.
        :type last: str
        """

        self._last = last

    @property
    def current_page(self) -> int:
        """Gets the current_page of this PagingInfo.

        The page number of the current page of results.  # noqa: E501

        :return: The current_page of this PagingInfo.
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page: int):
        """Sets the current_page of this PagingInfo.

        The page number of the current page of results.  # noqa: E501

        :param current_page: The current_page of this PagingInfo.
        :type current_page: int
        """

        self._current_page = current_page

    @property
    def total_pages(self) -> int:
        """Gets the total_pages of this PagingInfo.

        The total number of pages of results.  # noqa: E501

        :return: The total_pages of this PagingInfo.
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages: int):
        """Sets the total_pages of this PagingInfo.

        The total number of pages of results.  # noqa: E501

        :param total_pages: The total_pages of this PagingInfo.
        :type total_pages: int
        """

        self._total_pages = total_pages

    @property
    def per_page(self) -> int:
        """Gets the per_page of this PagingInfo.

        The number of results per page.  # noqa: E501

        :return: The per_page of this PagingInfo.
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page: int):
        """Sets the per_page of this PagingInfo.

        The number of results per page.  # noqa: E501

        :param per_page: The per_page of this PagingInfo.
        :type per_page: int
        """

        self._per_page = per_page

    @property
    def total_items(self) -> int:
        """Gets the total_items of this PagingInfo.

        The total number of results.  # noqa: E501

        :return: The total_items of this PagingInfo.
        :rtype: int
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items: int):
        """Sets the total_items of this PagingInfo.

        The total number of results.  # noqa: E501

        :param total_items: The total_items of this PagingInfo.
        :type total_items: int
        """

        self._total_items = total_items

    @property
    def sorted_by(self) -> PaperSortBy:
        """Gets the sorted_by of this PagingInfo.


        :return: The sorted_by of this PagingInfo.
        :rtype: PaperSortBy
        """
        return self._sorted_by

    @sorted_by.setter
    def sorted_by(self, sorted_by: PaperSortBy):
        """Sets the sorted_by of this PagingInfo.


        :param sorted_by: The sorted_by of this PagingInfo.
        :type sorted_by: PaperSortBy
        """

        self._sorted_by = sorted_by

    @property
    def sorted_order(self) -> SortOrder:
        """Gets the sorted_order of this PagingInfo.


        :return: The sorted_order of this PagingInfo.
        :rtype: SortOrder
        """
        return self._sorted_order

    @sorted_order.setter
    def sorted_order(self, sorted_order: SortOrder):
        """Sets the sorted_order of this PagingInfo.


        :param sorted_order: The sorted_order of this PagingInfo.
        :type sorted_order: SortOrder
        """

        self._sorted_order = sorted_order
