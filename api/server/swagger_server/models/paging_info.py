# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PagingInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, first: str=None, prev: str=None, current: str=None, next: str=None, last: str=None, current_page: int=None, per_page: int=None, total: int=None, sorted_by: str=None, sorted_order: str=None):  # noqa: E501
        """PagingInfo - a model defined in Swagger

        :param first: The first of this PagingInfo.  # noqa: E501
        :type first: str
        :param prev: The prev of this PagingInfo.  # noqa: E501
        :type prev: str
        :param current: The current of this PagingInfo.  # noqa: E501
        :type current: str
        :param next: The next of this PagingInfo.  # noqa: E501
        :type next: str
        :param last: The last of this PagingInfo.  # noqa: E501
        :type last: str
        :param current_page: The current_page of this PagingInfo.  # noqa: E501
        :type current_page: int
        :param per_page: The per_page of this PagingInfo.  # noqa: E501
        :type per_page: int
        :param total: The total of this PagingInfo.  # noqa: E501
        :type total: int
        :param sorted_by: The sorted_by of this PagingInfo.  # noqa: E501
        :type sorted_by: str
        :param sorted_order: The sorted_order of this PagingInfo.  # noqa: E501
        :type sorted_order: str
        """
        self.swagger_types = {
            'first': str,
            'prev': str,
            'current': str,
            'next': str,
            'last': str,
            'current_page': int,
            'per_page': int,
            'total': int,
            'sorted_by': str,
            'sorted_order': str
        }

        self.attribute_map = {
            'first': 'first',
            'prev': 'prev',
            'current': 'current',
            'next': 'next',
            'last': 'last',
            'current_page': 'currentPage',
            'per_page': 'perPage',
            'total': 'total',
            'sorted_by': 'sortedBy',
            'sorted_order': 'sortedOrder'
        }
        self._first = first
        self._prev = prev
        self._current = current
        self._next = next
        self._last = last
        self._current_page = current_page
        self._per_page = per_page
        self._total = total
        self._sorted_by = sorted_by
        self._sorted_order = sorted_order

    @classmethod
    def from_dict(cls, dikt) -> 'PagingInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PagingInfo of this PagingInfo.  # noqa: E501
        :rtype: PagingInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first(self) -> str:
        """Gets the first of this PagingInfo.


        :return: The first of this PagingInfo.
        :rtype: str
        """
        return self._first

    @first.setter
    def first(self, first: str):
        """Sets the first of this PagingInfo.


        :param first: The first of this PagingInfo.
        :type first: str
        """

        self._first = first

    @property
    def prev(self) -> str:
        """Gets the prev of this PagingInfo.


        :return: The prev of this PagingInfo.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev: str):
        """Sets the prev of this PagingInfo.


        :param prev: The prev of this PagingInfo.
        :type prev: str
        """

        self._prev = prev

    @property
    def current(self) -> str:
        """Gets the current of this PagingInfo.


        :return: The current of this PagingInfo.
        :rtype: str
        """
        return self._current

    @current.setter
    def current(self, current: str):
        """Sets the current of this PagingInfo.


        :param current: The current of this PagingInfo.
        :type current: str
        """

        self._current = current

    @property
    def next(self) -> str:
        """Gets the next of this PagingInfo.


        :return: The next of this PagingInfo.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next: str):
        """Sets the next of this PagingInfo.


        :param next: The next of this PagingInfo.
        :type next: str
        """

        self._next = next

    @property
    def last(self) -> str:
        """Gets the last of this PagingInfo.


        :return: The last of this PagingInfo.
        :rtype: str
        """
        return self._last

    @last.setter
    def last(self, last: str):
        """Sets the last of this PagingInfo.


        :param last: The last of this PagingInfo.
        :type last: str
        """

        self._last = last

    @property
    def current_page(self) -> int:
        """Gets the current_page of this PagingInfo.


        :return: The current_page of this PagingInfo.
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page: int):
        """Sets the current_page of this PagingInfo.


        :param current_page: The current_page of this PagingInfo.
        :type current_page: int
        """

        self._current_page = current_page

    @property
    def per_page(self) -> int:
        """Gets the per_page of this PagingInfo.


        :return: The per_page of this PagingInfo.
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page: int):
        """Sets the per_page of this PagingInfo.


        :param per_page: The per_page of this PagingInfo.
        :type per_page: int
        """

        self._per_page = per_page

    @property
    def total(self) -> int:
        """Gets the total of this PagingInfo.


        :return: The total of this PagingInfo.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total: int):
        """Sets the total of this PagingInfo.


        :param total: The total of this PagingInfo.
        :type total: int
        """

        self._total = total

    @property
    def sorted_by(self) -> str:
        """Gets the sorted_by of this PagingInfo.


        :return: The sorted_by of this PagingInfo.
        :rtype: str
        """
        return self._sorted_by

    @sorted_by.setter
    def sorted_by(self, sorted_by: str):
        """Sets the sorted_by of this PagingInfo.


        :param sorted_by: The sorted_by of this PagingInfo.
        :type sorted_by: str
        """

        self._sorted_by = sorted_by

    @property
    def sorted_order(self) -> str:
        """Gets the sorted_order of this PagingInfo.


        :return: The sorted_order of this PagingInfo.
        :rtype: str
        """
        return self._sorted_order

    @sorted_order.setter
    def sorted_order(self, sorted_order: str):
        """Sets the sorted_order of this PagingInfo.


        :param sorted_order: The sorted_order of this PagingInfo.
        :type sorted_order: str
        """

        self._sorted_order = sorted_order
