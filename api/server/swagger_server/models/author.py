# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Author(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, surname: str=None, corresp: str=None, orcid: str=None, position_idx: int=None, given_names: str=None):  # noqa: E501
        """Author - a model defined in Swagger

        :param surname: The surname of this Author.  # noqa: E501
        :type surname: str
        :param corresp: The corresp of this Author.  # noqa: E501
        :type corresp: str
        :param orcid: The orcid of this Author.  # noqa: E501
        :type orcid: str
        :param position_idx: The position_idx of this Author.  # noqa: E501
        :type position_idx: int
        :param given_names: The given_names of this Author.  # noqa: E501
        :type given_names: str
        """
        self.swagger_types = {
            'surname': str,
            'corresp': str,
            'orcid': str,
            'position_idx': int,
            'given_names': str
        }

        self.attribute_map = {
            'surname': 'surname',
            'corresp': 'corresp',
            'orcid': 'orcid',
            'position_idx': 'position_idx',
            'given_names': 'given_names'
        }
        self._surname = surname
        self._corresp = corresp
        self._orcid = orcid
        self._position_idx = position_idx
        self._given_names = given_names

    @classmethod
    def from_dict(cls, dikt) -> 'Author':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Author of this Author.  # noqa: E501
        :rtype: Author
        """
        return util.deserialize_model(dikt, cls)

    @property
    def surname(self) -> str:
        """Gets the surname of this Author.


        :return: The surname of this Author.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname: str):
        """Sets the surname of this Author.


        :param surname: The surname of this Author.
        :type surname: str
        """

        self._surname = surname

    @property
    def corresp(self) -> str:
        """Gets the corresp of this Author.


        :return: The corresp of this Author.
        :rtype: str
        """
        return self._corresp

    @corresp.setter
    def corresp(self, corresp: str):
        """Sets the corresp of this Author.


        :param corresp: The corresp of this Author.
        :type corresp: str
        """

        self._corresp = corresp

    @property
    def orcid(self) -> str:
        """Gets the orcid of this Author.


        :return: The orcid of this Author.
        :rtype: str
        """
        return self._orcid

    @orcid.setter
    def orcid(self, orcid: str):
        """Sets the orcid of this Author.


        :param orcid: The orcid of this Author.
        :type orcid: str
        """

        self._orcid = orcid

    @property
    def position_idx(self) -> int:
        """Gets the position_idx of this Author.


        :return: The position_idx of this Author.
        :rtype: int
        """
        return self._position_idx

    @position_idx.setter
    def position_idx(self, position_idx: int):
        """Sets the position_idx of this Author.


        :param position_idx: The position_idx of this Author.
        :type position_idx: int
        """

        self._position_idx = position_idx

    @property
    def given_names(self) -> str:
        """Gets the given_names of this Author.


        :return: The given_names of this Author.
        :rtype: str
        """
        return self._given_names

    @given_names.setter
    def given_names(self, given_names: str):
        """Sets the given_names of this Author.


        :param given_names: The given_names of this Author.
        :type given_names: str
        """

        self._given_names = given_names
