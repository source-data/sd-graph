/*
 * Early Evidence Base API
 * Read-only API for the Early Evidence Base platform providing collections of papers by reviewing service, automagic, and auto topics, as well as details on papers by DOI.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.51
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EarlyEvidenceBaseApi);
  }
}(this, function(expect, EarlyEvidenceBaseApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PagingInfo', function() {
      beforeEach(function() {
        instance = new EarlyEvidenceBaseApi.PagingInfo();
      });

      it('should create an instance of PagingInfo', function() {
        // TODO: update the code to test PagingInfo
        expect(instance).to.be.a(EarlyEvidenceBaseApi.PagingInfo);
      });

      it('should have the property first (base name: "first")', function() {
        // TODO: update the code to test the property first
        expect(instance).to.have.property('first');
        // expect(instance.first).to.be(expectedValueLiteral);
      });

      it('should have the property prev (base name: "prev")', function() {
        // TODO: update the code to test the property prev
        expect(instance).to.have.property('prev');
        // expect(instance.prev).to.be(expectedValueLiteral);
      });

      it('should have the property current (base name: "current")', function() {
        // TODO: update the code to test the property current
        expect(instance).to.have.property('current');
        // expect(instance.current).to.be(expectedValueLiteral);
      });

      it('should have the property next (base name: "next")', function() {
        // TODO: update the code to test the property next
        expect(instance).to.have.property('next');
        // expect(instance.next).to.be(expectedValueLiteral);
      });

      it('should have the property last (base name: "last")', function() {
        // TODO: update the code to test the property last
        expect(instance).to.have.property('last');
        // expect(instance.last).to.be(expectedValueLiteral);
      });

      it('should have the property currentPage (base name: "currentPage")', function() {
        // TODO: update the code to test the property currentPage
        expect(instance).to.have.property('currentPage');
        // expect(instance.currentPage).to.be(expectedValueLiteral);
      });

      it('should have the property perPage (base name: "perPage")', function() {
        // TODO: update the code to test the property perPage
        expect(instance).to.have.property('perPage');
        // expect(instance.perPage).to.be(expectedValueLiteral);
      });

      it('should have the property total (base name: "total")', function() {
        // TODO: update the code to test the property total
        expect(instance).to.have.property('total');
        // expect(instance.total).to.be(expectedValueLiteral);
      });

      it('should have the property sortedBy (base name: "sortedBy")', function() {
        // TODO: update the code to test the property sortedBy
        expect(instance).to.have.property('sortedBy');
        // expect(instance.sortedBy).to.be(expectedValueLiteral);
      });

      it('should have the property sortedOrder (base name: "sortedOrder")', function() {
        // TODO: update the code to test the property sortedOrder
        expect(instance).to.have.property('sortedOrder');
        // expect(instance.sortedOrder).to.be(expectedValueLiteral);
      });

    });
  });

}));
