/*
 * Early Evidence Base API
 * Read-only API for the Early Evidence Base platform providing collections of papers by reviewing service, automagic, and auto topics, as well as details on papers by DOI.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.51
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EarlyEvidenceBaseApi);
  }
}(this, function(expect, EarlyEvidenceBaseApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Paper', function() {
      beforeEach(function() {
        instance = new EarlyEvidenceBaseApi.Paper();
      });

      it('should create an instance of Paper', function() {
        // TODO: update the code to test Paper
        expect(instance).to.be.a(EarlyEvidenceBaseApi.Paper);
      });

      it('should have the property doi (base name: "doi")', function() {
        // TODO: update the code to test the property doi
        expect(instance).to.have.property('doi');
        // expect(instance.doi).to.be(expectedValueLiteral);
      });

      it('should have the property version (base name: "version")', function() {
        // TODO: update the code to test the property version
        expect(instance).to.have.property('version');
        // expect(instance.version).to.be(expectedValueLiteral);
      });

      it('should have the property source (base name: "source")', function() {
        // TODO: update the code to test the property source
        expect(instance).to.have.property('source');
        // expect(instance.source).to.be(expectedValueLiteral);
      });

      it('should have the property journal (base name: "journal")', function() {
        // TODO: update the code to test the property journal
        expect(instance).to.have.property('journal');
        // expect(instance.journal).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property _abstract (base name: "abstract")', function() {
        // TODO: update the code to test the property _abstract
        expect(instance).to.have.property('_abstract');
        // expect(instance._abstract).to.be(expectedValueLiteral);
      });

      it('should have the property journalDoi (base name: "journal_doi")', function() {
        // TODO: update the code to test the property journalDoi
        expect(instance).to.have.property('journalDoi');
        // expect(instance.journalDoi).to.be(expectedValueLiteral);
      });

      it('should have the property publishedJournalTitle (base name: "published_journal_title")', function() {
        // TODO: update the code to test the property publishedJournalTitle
        expect(instance).to.have.property('publishedJournalTitle');
        // expect(instance.publishedJournalTitle).to.be(expectedValueLiteral);
      });

      it('should have the property pubDate (base name: "pub_date")', function() {
        // TODO: update the code to test the property pubDate
        expect(instance).to.have.property('pubDate');
        // expect(instance.pubDate).to.be(expectedValueLiteral);
      });

      it('should have the property authors (base name: "authors")', function() {
        // TODO: update the code to test the property authors
        expect(instance).to.have.property('authors');
        // expect(instance.authors).to.be(expectedValueLiteral);
      });

      it('should have the property revdate (base name: "revdate")', function() {
        // TODO: update the code to test the property revdate
        expect(instance).to.have.property('revdate');
        // expect(instance.revdate).to.be(expectedValueLiteral);
      });

      it('should have the property entities (base name: "entities")', function() {
        // TODO: update the code to test the property entities
        expect(instance).to.have.property('entities');
        // expect(instance.entities).to.be(expectedValueLiteral);
      });

      it('should have the property assays (base name: "assays")', function() {
        // TODO: update the code to test the property assays
        expect(instance).to.have.property('assays');
        // expect(instance.assays).to.be(expectedValueLiteral);
      });

      it('should have the property mainTopics (base name: "main_topics")', function() {
        // TODO: update the code to test the property mainTopics
        expect(instance).to.have.property('mainTopics');
        // expect(instance.mainTopics).to.be(expectedValueLiteral);
      });

      it('should have the property highlightedEntities (base name: "highlighted_entities")', function() {
        // TODO: update the code to test the property highlightedEntities
        expect(instance).to.have.property('highlightedEntities');
        // expect(instance.highlightedEntities).to.be(expectedValueLiteral);
      });

      it('should have the property slug (base name: "slug")', function() {
        // TODO: update the code to test the property slug
        expect(instance).to.have.property('slug');
        // expect(instance.slug).to.be(expectedValueLiteral);
      });

      it('should have the property reviewedBy (base name: "reviewed_by")', function() {
        // TODO: update the code to test the property reviewedBy
        expect(instance).to.have.property('reviewedBy');
        // expect(instance.reviewedBy).to.be(expectedValueLiteral);
      });

    });
  });

}));
