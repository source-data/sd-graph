/*
 * Early Evidence Base API
 * Read-only API for the Early Evidence Base platform providing collections of papers by reviewing service, automagic, and auto topics, as well as details on papers by DOI.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.51
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EarlyEvidenceBaseApi);
  }
}(this, function(expect, EarlyEvidenceBaseApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ReviewingServiceDescription', function() {
      beforeEach(function() {
        instance = new EarlyEvidenceBaseApi.ReviewingServiceDescription();
      });

      it('should create an instance of ReviewingServiceDescription', function() {
        // TODO: update the code to test ReviewingServiceDescription
        expect(instance).to.be.a(EarlyEvidenceBaseApi.ReviewingServiceDescription);
      });

      it('should have the property peerReviewPolicy (base name: "peer_review_policy")', function() {
        // TODO: update the code to test the property peerReviewPolicy
        expect(instance).to.have.property('peerReviewPolicy');
        // expect(instance.peerReviewPolicy).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property competingInterests (base name: "competing_interests")', function() {
        // TODO: update the code to test the property competingInterests
        expect(instance).to.have.property('competingInterests');
        // expect(instance.competingInterests).to.be(expectedValueLiteral);
      });

      it('should have the property opportunityForAuthorResponse (base name: "opportunity_for_author_response")', function() {
        // TODO: update the code to test the property opportunityForAuthorResponse
        expect(instance).to.have.property('opportunityForAuthorResponse');
        // expect(instance.opportunityForAuthorResponse).to.be(expectedValueLiteral);
      });

      it('should have the property reviewerSelectedBy (base name: "reviewer_selected_by")', function() {
        // TODO: update the code to test the property reviewerSelectedBy
        expect(instance).to.have.property('reviewerSelectedBy');
        // expect(instance.reviewerSelectedBy).to.be(expectedValueLiteral);
      });

      it('should have the property recommendation (base name: "recommendation")', function() {
        // TODO: update the code to test the property recommendation
        expect(instance).to.have.property('recommendation');
        // expect(instance.recommendation).to.be(expectedValueLiteral);
      });

      it('should have the property publicInteraction (base name: "public_interaction")', function() {
        // TODO: update the code to test the property publicInteraction
        expect(instance).to.have.property('publicInteraction');
        // expect(instance.publicInteraction).to.be(expectedValueLiteral);
      });

      it('should have the property reviewCoverage (base name: "review_coverage")', function() {
        // TODO: update the code to test the property reviewCoverage
        expect(instance).to.have.property('reviewCoverage');
        // expect(instance.reviewCoverage).to.be(expectedValueLiteral);
      });

      it('should have the property reviewRequestedBy (base name: "review_requested_by")', function() {
        // TODO: update the code to test the property reviewRequestedBy
        expect(instance).to.have.property('reviewRequestedBy');
        // expect(instance.reviewRequestedBy).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

      it('should have the property reviewerIdentityKnownTo (base name: "reviewer_identity_known_to")', function() {
        // TODO: update the code to test the property reviewerIdentityKnownTo
        expect(instance).to.have.property('reviewerIdentityKnownTo');
        // expect(instance.reviewerIdentityKnownTo).to.be(expectedValueLiteral);
      });

    });
  });

}));
