services:
  flask:
    image: ghcr.io/source-data/sd-graph_deploy_flask:${IMAGE_TAG:-latest}
    build:
      args:
        BUILD_TARGET: deploy
      context: .
      dockerfile: ./compose/flask/Dockerfile
    labels:
      org.opencontainers.image.source: ${IMAGE_SOURCE:-}
      org.opencontainers.image.revision: ${IMAGE_REVISION:-}
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./.env

  neo4j:
    image: neo4j:4.4
    deploy:
      resources:
        limits:
          memory: ${NEO4J_MEMORY_LIMIT:-4G}
    env_file:
      - ./.env
    environment:
      - NEO4JLABS_PLUGINS=["apoc", "graph-data-science"]
    healthcheck:
      test: cypher-shell -u ${NEO_USERNAME} -p ${NEO_PASSWORD} --non-interactive "MATCH (n) RETURN ID(n) LIMIT 1"
      # wait up to 10 minutes for neo4j to be ready
      interval: 10s
      timeout: 10s
      retries: 60


  vuejs:
    image: ghcr.io/source-data/sd-graph_vuejs:${IMAGE_TAG:-latest}
    build:
      context: .
      dockerfile: ./compose/local/vuejs/Dockerfile
      labels:
        org.opencontainers.image.source: ${IMAGE_SOURCE:-}
        org.opencontainers.image.revision: ${IMAGE_REVISION:-}
    env_file:
      - ./.env

  redis:
    image: redis:6
    healthcheck:
      test: redis-cli --raw incr ping
